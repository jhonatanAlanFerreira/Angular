v1: -----
    ngModel

        It takes a value of an input and store in a variable, which is shown through a <p></p>
    --------------------------------------------------------

v2: -----
    <input type="text" (input)="showTyped($event)">

    showTyped(event){
        console.log(<HTMLInputElement>event.target.value);
    }
    --------------------------------------------------------

v3: -----
    <input type="text" class="form-control" [(ngModel)]="name">
    <p>{{ name }}</p></div>

            Important: For Two-Way-Binding (covered in the next lecture) to work, you need to enable the ngModel  directive. This is done by adding the FormsModule  to the imports[]  array in the AppModule.

            You then also need to add the import from @angular/forms  in the app.module.ts file:

            import { FormsModule } from '@angular/forms';
    --------------------------------------------------------

    [ngSwitch]="var"
        *ngSwitchCase="1"
        *ngSwitchDefault
    ------------------------------------------------------------
   
v4: -----
    ngClass

        It works better than ngStyle: {`className`:`condiction`}
    ---------------------------------------------------------------

    component to FOR EXEMPLE
    --------------------------------------------------------------

v5: -----
    #nameElement

        It takes any element of a HTML, (input = #nameElement.value)
    ----------------------------------------------------------

    keydown.enter=""

        enter events == focusIn, focusOut, doNothing, 
    -----------------------------------------------------------

    window.innerWidth

        It takes the window's size
    ---------------------------------------------------------

    @HostListener ('window:resize', ['$event'])
        onResize(event) {
            this.tamanhoTela = window.innerWidth;
        }

        It checks changes on size af a screen
    -------------------------------------------------------------

v6: -----

    ViewChild

        It does two way binding with a #nameElement, updates in any function executation and it is possible to change its value through function
    ------------------------------------------------------------------------

v7: -----

    Creating directive (ng g d nameDirective) and passing array through binding with Input having same alias
    no alias would be => <div directiveName [toBinding]="someVariable" ></div>
    --------------------------------------------------------------------------------

    Using slice() to get a copy of an array without reference
    ---------------------------------------------------------------------

    sorting element through key.value
    ------------------------------------------------------------------------------

    using ngAfterContentInit to do something after component is created
    --------------------------------------------------------------------------

    @HostListener

        It gets the element HTML where it was declared

Lifecycle: -----

    ngOnChanges: Called after a bound input property changes  @Input()
    ngOninit: Called once the component is initialized
    ngDoCheck: called during every change detection run
    ngAfterContentInit: called after content (ng-content) has been projected into ViewChild
    ngAfterContentChecked: called every time the projected content has been ngAfterContentChecked
    ngAfterViewInit: called after the component's view (and child views) have been ngAfterContentChecked
    ngOnDestroy: called once the component is about to be destroyed
    --------------------------------------------------------------------------------------------------------
    
Repeat Function & random number: -----

    start(){
        this.interval = setInterval(()=>{
        this.event.emit(Math.floor(Math.random()*100));
        },1000)
    }
    
    stop(){
        clearInterval(this.interval);
    }
    ------------------------------------------------------------------------------------------------

Auto Scroll: -----

    @ViewChild("scroll") autoScroll: ElementRef;

     ngAfterViewChecked(){
        this.autoScroll.nativeElement.scrollIntoView(false);
     }
     ----------------------------------------------------------------------------------------------

delay: -----

    setTimeOut(() => {
        some Code.....
    })
    -------------------------------------------------------------------------------------
    